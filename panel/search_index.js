var search_data = {"index":{"longSearchIndex":["bin/trac","lib/trac4r.rb","trac","trac","trac","trac","trac","trac","trac::tickets","trac::base","trac::tickets","trac::wiki","object","trac::tickets","trac::tickets","trac::ticket","object","trac::tickets","trac::tickets","trac::wiki","trac::tickets","trac::wiki","object","trac::tickets","trac::tickets","trac::tickets","trac::wiki","trac::wiki","trac::wiki","trac::wiki","trac::tickets","object","trac::tickets","trac::wiki","trac::tickets","trac::ticket","trac::tracexception","trac::ticket","trac","trac::base","trac::query","trac::ticket","trac::tickets","trac::tracexception","trac::wiki","trac::wiki","trac::tickets","trac::wiki","trac::base","trac::query","trac::tickets","trac::wiki","trac::tickets","trac::tickets","trac::tracexception","files/readme_rdoc.html","files/bin/trac.html","files/lib/trac4r_rb.html","files/lib/trac4r/error_rb.html","files/lib/trac4r/query_rb.html","files/lib/trac4r/ticket_rb.html","files/lib/trac4r/tickets_rb.html","files/lib/trac4r/wiki_rb.html"],"info":[["Object","bin/trac","classes/Object.html"," < Object","",1],["Trac","lib/trac4r/error.rb","classes/Trac.html"," < ","This module wraps the XMLRPC interface of trac (http://trac.edgewall.org/) into a ruby library. You can",1],["Base","Trac","classes/Trac/Base.html"," < Object","",1],["Query","Trac","classes/Trac/Query.html"," < Object","",1],["Ticket","Trac","classes/Trac/Ticket.html"," < Object","This class represents a ticket as it is retrieved from the database Custom fields are detected and available",1],["Tickets","Trac","classes/Trac/Tickets.html"," < Object","",1],["TracException","Trac","classes/Trac/TracException.html"," < Exception","",1],["Wiki","Trac","classes/Trac/Wiki.html"," < Object","",1],["actions","Trac::Tickets","classes/Trac/Tickets.html#M000036","(ticket_id)","returns the actions that can be performed on the ticket ",2],["api_version","Trac::Base","classes/Trac/Base.html#M000043","()","",2],["attachments","Trac::Tickets","classes/Trac/Tickets.html#M000032","(ticket_id)","returns a list of attachments for the given ticket ",2],["attachments","Trac::Wiki","classes/Trac/Wiki.html#M000022","(page)","returns a list of all attachments of a page ",2],["bold","Object","classes/Object.html#M000045","(string)","",2],["changelog","Trac::Tickets","classes/Trac/Tickets.html#M000030","(ticket_id,w=0)","return the changelog as a list of tuples of the form (time,author, field,oldvalue,newvalue,permanent).",2],["changes","Trac::Tickets","classes/Trac/Tickets.html#M000031","(time)","returns a list of ids of tickets that have changed since `time' ",2],["check","Trac::Ticket","classes/Trac/Ticket.html#M000005","()","checks if all attributes are set ",2],["code","Object","classes/Object.html#M000047","(string)","",2],["create","Trac::Tickets","classes/Trac/Tickets.html#M000027","(summary,description,attributes={ })","create a new ticket returning the ticket id ",2],["delete","Trac::Tickets","classes/Trac/Tickets.html#M000029","(id)","delete ticket by id ",2],["delete","Trac::Wiki","classes/Trac/Wiki.html#M000021","(name)","deletes page with given name, returning true on success. ",2],["delete_attachment","Trac::Tickets","classes/Trac/Tickets.html#M000035","(ticket_id,filename)","deletes given attachment ",2],["delete_attachment","Trac::Wiki","classes/Trac/Wiki.html#M000026","(path)","deletes attachment with given `path' ",2],["do_wrap","Object","classes/Object.html#M000044","(string,indent,cols)","Not sure about this ",2],["get","Trac::Tickets","classes/Trac/Tickets.html#M000024","(id)","fetch a ticket. Returns instance of Trac::Ticket ",2],["get_all","Trac::Tickets","classes/Trac/Tickets.html#M000018","(options={ })","returns all tickets (not just the ids) in a hash warning: to avoid heavy traffic load the results are",2],["get_attachment","Trac::Tickets","classes/Trac/Tickets.html#M000033","(ticket_id,filename)","returns the content of an attachment ",2],["get_attachment","Trac::Wiki","classes/Trac/Wiki.html#M000023","(path)","returns the content of an attachment ",2],["get_html","Trac::Wiki","classes/Trac/Wiki.html#M000014","(name)","returns a whole page in HTML ",2],["get_info","Trac::Wiki","classes/Trac/Wiki.html#M000015","(name)","returns a whole page in HTML ",2],["get_raw","Trac::Wiki","classes/Trac/Wiki.html#M000019","(name)","returns a whole page in raw format ",2],["get_settings","Trac::Tickets","classes/Trac/Tickets.html#M000038","()","returns the settings in the same form as Tickets#settings, but refreshes them every time we call it.",2],["italic","Object","classes/Object.html#M000046","(string)","",2],["list","Trac::Tickets","classes/Trac/Tickets.html#M000010","(options={ })","returns a list of all tickets (the ids), by performing two queries, one for closed tickets, one for opened.",2],["list","Trac::Wiki","classes/Trac/Wiki.html#M000012","()","returns a list of all pages ",2],["list_closed","Trac::Tickets","classes/Trac/Tickets.html#M000017","()","like `list', but only gets closed tickets ",2],["load","Trac::Ticket","classes/Trac/Ticket.html#M000008","(params)","loads a ticket from the XMLRPC response ",2],["message","Trac::TracException","classes/Trac/TracException.html#M000001","()","Gives a more useful message for common problems ",2],["method_missing","Trac::Ticket","classes/Trac/Ticket.html#M000007","(sym,*args)","If a method call has no args and matches an instance variable, we return its value.  e.g. if our tickets",2],["new","Trac","classes/Trac.html#M000040","(url, user=nil,pass=nil)","returns a new instance of Trac::Base ",2],["new","Trac::Base","classes/Trac/Base.html#M000041","(url,user,pass)","",2],["new","Trac::Query","classes/Trac/Query.html#M000003","(url,user,pass)","",2],["new","Trac::Ticket","classes/Trac/Ticket.html#M000004","(id=0)","returns a new ticket ",2],["new","Trac::Tickets","classes/Trac/Tickets.html#M000009","(trac)","",2],["new","Trac::TracException","classes/Trac/TracException.html#M000000","(http_error,host,port,path,method,args,exception)","Creates new TracException [+http_error+] the error message, possibly mulit-line [+host+] host on which",2],["new","Trac::Wiki","classes/Trac/Wiki.html#M000011","(trac)","",2],["put","Trac::Wiki","classes/Trac/Wiki.html#M000020","(name,content,attributes={ })","sends a page. if the page doesn't exist yet it is created otherwise it will be overwritten with the new",2],["put_attachment","Trac::Tickets","classes/Trac/Tickets.html#M000034","(ticket_id,filename,description,data,replace=true)","adds an attachment to a ticket ",2],["put_attachment","Trac::Wiki","classes/Trac/Wiki.html#M000025","(page,filename,description,data,replace=false)","uploads given `data' as an attachment to given `page'. returns true on success. unlike the XMLRPC-Call",2],["query","Trac::Base","classes/Trac/Base.html#M000042","(command,*args)","",2],["query","Trac::Query","classes/Trac/Query.html#M000006","(command, *args)","",2],["query","Trac::Tickets","classes/Trac/Tickets.html#M000016","(args)","Run an arbitrary ticket query [+args+] a hash of options, each should use a symbol or string as the key",2],["raw_to_html","Trac::Wiki","classes/Trac/Wiki.html#M000013","(content)","convert a raw page to html (e.g. for preview) ",2],["settings","Trac::Tickets","classes/Trac/Tickets.html#M000037","()","returns all settings (possible values for status, version, priority, resolution, component, type, severity",2],["update","Trac::Tickets","classes/Trac/Tickets.html#M000028","(id,comment,attributes={ })","update ticket returning the ticket in the same orm as ticket.get ",2],["url","Trac::TracException","classes/Trac/TracException.html#M000002","()","",2],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","trac4r: Ruby wrapper for the Trac XML-RPC API =============================================  Author::",3],["trac","files/bin/trac.html","files/bin/trac.html","","",3],["trac4r.rb","files/lib/trac4r_rb.html","files/lib/trac4r_rb.html","","",3],["error.rb","files/lib/trac4r/error_rb.html","files/lib/trac4r/error_rb.html","","",3],["query.rb","files/lib/trac4r/query_rb.html","files/lib/trac4r/query_rb.html","","",3],["ticket.rb","files/lib/trac4r/ticket_rb.html","files/lib/trac4r/ticket_rb.html","","",3],["tickets.rb","files/lib/trac4r/tickets_rb.html","files/lib/trac4r/tickets_rb.html","","",3],["wiki.rb","files/lib/trac4r/wiki_rb.html","files/lib/trac4r/wiki_rb.html","","",3]],"searchIndex":["object","trac","base","query","ticket","tickets","tracexception","wiki","actions()","api_version()","attachments()","attachments()","bold()","changelog()","changes()","check()","code()","create()","delete()","delete()","delete_attachment()","delete_attachment()","do_wrap()","get()","get_all()","get_attachment()","get_attachment()","get_html()","get_info()","get_raw()","get_settings()","italic()","list()","list()","list_closed()","load()","message()","method_missing()","new()","new()","new()","new()","new()","new()","new()","put()","put_attachment()","put_attachment()","query()","query()","query()","raw_to_html()","settings()","update()","url()","readme.rdoc","trac","trac4r.rb","error.rb","query.rb","ticket.rb","tickets.rb","wiki.rb"]}}